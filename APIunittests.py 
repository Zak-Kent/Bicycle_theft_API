import unittest
import requests

# use below to time API response time 
# import time 
# start = time.time()
# roundtrip = time.time() - start

class URLRestgisEndpointTests(unittest.TestCase):

    def setUp(self):
        self.restgis_url_base = 'http://localhost:8000/api/v1/racks/'
        self.restgis_url_coords = 'http://localhost:8000/api/v1/racks/?point={},{}'
        self.restgis_url_dist = 'http://localhost:8000/api/v1/racks/?dist={}&point={},{}'

    def helper_API_get(self, *args):
        if len(args) == 2: 
            url = self.restgis_url.format(args[0], args[1])
        elif len(args) == 3:
            url = self.restgis_url_dist.format(args[0], args[1], args[2])
        else: 
            raise ValueError('Args for url not correct')  

        return requests.get(url)

    def test_restgis_API_get_dist_provided_one_rack_returned(self):
        response = self.helper_API_get(30, -122.677825, 45.524433)
        json = response.json()

        self.assertEqual(len(json), 1)
        self.assertEqual(response.status_code, 200)

    def test_base_url_response_returns_all_racks(self):
        response = requests.get(self.restgis_url_base) 
        json = response.json() 
        # 6746 total number of racks in DB
        self.assertEqual(len(json), 6746)
        self.assertEqual(response.status_code, 200)

    def test_restgis_API_downtown_racks_within_30m(self):
        response = self.helper_API_get(30, -122.681158, 45.518396) 
        json = response.json()

        self.assertEqual(len(json), 19)
        self.assertEqual(response.status_code, 200) 

    def test_out_of_region_search_no_results(self):
        response = self.helper_API_get(50, -122.873805, 45.629905)
        json = response.json()

        self.assertEqual(len(json), 0)
        self.assertEqual(response.status_code, 200)


if __name__ == '__main__':
    unittest.main()